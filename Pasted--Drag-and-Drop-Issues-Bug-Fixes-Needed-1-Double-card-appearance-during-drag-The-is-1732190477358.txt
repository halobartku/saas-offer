## Drag and Drop Issues

### Bug Fixes Needed
1. Double card appearance during drag:
   - The issue stems from the original card remaining visible while the DragOverlay card is shown
   - Fix: Add `opacity: activeId === offer.id ? 0 : 1` to the style object in DraggableCard

2. Dragging difficulty:
   - Current activation constraints may be too strict
   - `activationConstraint` in PointerSensor has a delay of 100ms and distance of 8px
   - Recommend adjusting to: 
     ```javascript
     activationConstraint: {
       distance: 5,
       delay: 50,
       tolerance: 5,
     }
     ```

3. Event propagation issues:
   - The current click handler might interfere with drag initialization
   - Add `e.preventDefault()` in the onClick handler of the View button

## Code Organization Recommendations

### Suggested File Structure
```
components/
  pipeline/
    DraggableCard.tsx
    DroppableColumn.tsx
    PipelineStats.tsx
    ContactSchedule/
      index.tsx
      CalendarView.tsx
      CollapsedView.tsx
    
hooks/
  usePipelineStats.ts
  usePipelineDrag.ts
  
constants/
  pipelineStatus.ts
  
types/
  pipeline.ts
```

### Benefits of Splitting

1. **Maintainability**:
   - Each component has a single responsibility
   - Easier to locate and fix bugs
   - Reduced cognitive load when working on specific features

2. **Testing**:
   - Smaller components are easier to unit test
   - Can mock and test drag-and-drop logic separately
   - Isolated calendar functionality testing

3. **Performance**:
   - Components can be memoized more effectively
   - Reduced re-renders due to better state isolation
   - Code splitting possibilities for lazy loading

4. **Reusability**:
   - DraggableCard could be used in other contexts
   - Stats component could be reused in dashboards
   - Calendar functionality could be shared across features

### Specific Component Extractions

1. **DraggableCard**:
   - Move to separate component
   - Add proper TypeScript interfaces
   - Implement memo to prevent unnecessary re-renders

2. **Pipeline Stats**:
   - Extract statistics calculation logic to custom hook
   - Create dedicated stats display component
   - Add proper memoization for calculations

3. **Contact Schedule**:
   - Separate expanded and collapsed views
   - Extract calendar logic to custom hook
   - Create dedicated components for week and day views

4. **State Management**:
   - Consider moving state to React Query or similar
   - Extract drag and drop logic to custom hook
   - Implement proper loading states

## Implementation Priority

1. Fix drag and drop bugs first
2. Extract DraggableCard component
3. Move statistics logic to custom hook
4. Split Contact Schedule component
5. Implement remaining component splits

This refactoring should be done incrementally to maintain application stability while improving the codebase structure.