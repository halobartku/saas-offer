import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
} from "@/components/ui/command";
import { Separator } from "@/components/ui/separator";
import { CalendarIcon, Plus, Trash2, ChevronsUpDown, Check, Loader2 } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { insertOfferSchema, type InsertOffer } from "db/schema";
import useSWR from "swr";
import { format } from "date-fns";
import { z } from "zod";
import { cn } from "@/lib/utils";

// ... (keep all the existing interfaces, schemas, and helper functions)

export default function OfferForm({ onSuccess, initialData, onClose }: OfferFormProps) {
  const { toast } = useToast();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [openClient, setOpenClient] = useState(false);
  const [openProduct, setOpenProduct] = useState<number | null>(null);
  const [clientSearch, setClientSearch] = useState("");
  const [productSearches, setProductSearches] = useState<{ [key: number]: string }>({});
  
  const { data: clients = [], error: clientsError, isLoading: clientsLoading } = useSWR("/api/clients");
  const { data: products = [], error: productsError, isLoading: productsLoading } = useSWR("/api/products");
  const { data: offerItems } = useSWR(
    initialData?.id ? `/api/offers/${initialData.id}/items` : null
  );

  // Filter clients based on search
  const filteredClients = clients.filter((client: any) =>
    client.name.toLowerCase().includes(clientSearch.toLowerCase()) ||
    client.email.toLowerCase().includes(clientSearch.toLowerCase())
  );

  // Filter products based on search for specific index
  const getFilteredProducts = (index: number) => {
    const search = productSearches[index] || "";
    return products.filter((product: any) =>
      product.name.toLowerCase().includes(search.toLowerCase()) ||
      product.sku.toLowerCase().includes(search.toLowerCase())
    );
  };

  const form = useForm<InsertOffer>({
    resolver: zodResolver(enhancedOfferSchema),
    defaultValues: {
      title: initialData?.title || "",
      clientId: initialData?.clientId || "",
      status: (initialData?.status as OfferStatus) || "draft",
      validUntil: initialData?.validUntil || undefined,
      notes: initialData?.notes || "",
      lastContact: initialData?.lastContact || undefined,
      nextContact: initialData?.nextContact || undefined,
      items: []
    },
  });

  // ... (keep existing useEffect hooks and helper functions)

  const handleProductSearch = (value: string, index: number) => {
    setProductSearches(prev => ({
      ...prev,
      [index]: value
    }));
  };

  return (
    <>
      {/* ... (keep existing header) */}
      
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
          {/* ... (keep other form fields the same) */}

          {/* Updated Client Selection */}
          <FormField
            control={form.control}
            name="clientId"
            render={({ field }) => (
              <FormItem className="flex flex-col">
                <FormLabel>Client</FormLabel>
                <Popover 
                  open={openClient} 
                  onOpenChange={setOpenClient}
                >
                  <PopoverTrigger asChild>
                    <FormControl>
                      <Button
                        variant="outline"
                        role="combobox"
                        aria-expanded={openClient}
                        className={cn(
                          "justify-between",
                          !field.value && "text-muted-foreground"
                        )}
                      >
                        {field.value
                          ? clients?.find((client: any) => client.id === field.value)?.name
                          : "Select client..."}
                        <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                      </Button>
                    </FormControl>
                  </PopoverTrigger>
                  <PopoverContent className="w-[400px] p-0">
                    <Command>
                      <CommandInput 
                        placeholder="Search clients..."
                        value={clientSearch}
                        onValueChange={setClientSearch}
                      />
                      <CommandEmpty>No client found.</CommandEmpty>
                      <CommandGroup>
                        {filteredClients.map((client: any) => (
                          <CommandItem
                            key={client.id}
                            value={client.id}
                            onSelect={() => {
                              form.setValue("clientId", client.id);
                              setOpenClient(false);
                              setClientSearch("");
                            }}
                          >
                            <Check
                              className={cn(
                                "mr-2 h-4 w-4",
                                client.id === field.value ? "opacity-100" : "opacity-0"
                              )}
                            />
                            <div className="flex flex-col">
                              <span>{client.name}</span>
                              <span className="text-sm text-muted-foreground">
                                {client.email} â€¢ {client.clientType}
                              </span>
                            </div>
                          </CommandItem>
                        ))}
                      </CommandGroup>
                    </Command>
                  </PopoverContent>
                </Popover>
                <FormMessage />
              </FormItem>
            )}
          />

          {/* Updated Products Section */}
          {form.watch("items")?.map((_, index) => (
            <div key={index} className="space-y-4 p-4 border rounded-lg">
              {/* ... (keep other product fields the same) */}
              
              <FormField
                control={form.control}
                name={`items.${index}.productId`}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Product</FormLabel>
                    <Popover
                      open={openProduct === index}
                      onOpenChange={(open) => {
                        setOpenProduct(open ? index : null);
                        if (!open) {
                          setProductSearches(prev => ({
                            ...prev,
                            [index]: ""
                          }));
                        }
                      }}
                    >
                      <PopoverTrigger asChild>
                        <FormControl>
                          <Button
                            variant="outline"
                            role="combobox"
                            className={cn(
                              "justify-between w-full",
                              !field.value && "text-muted-foreground"
                            )}
                          >
                            {field.value
                              ? products?.find((product: any) => product.id === field.value)?.name
                              : "Select product..."}
                            <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                          </Button>
                        </FormControl>
                      </PopoverTrigger>
                      <PopoverContent className="w-[400px] p-0">
                        <Command>
                          <CommandInput 
                            placeholder="Search products..."
                            value={productSearches[index] || ""}
                            onValueChange={(value) => handleProductSearch(value, index)}
                          />
                          <CommandEmpty>No product found.</CommandEmpty>
                          <CommandGroup>
                            {getFilteredProducts(index).map((product: any) => (
                              <CommandItem
                                key={product.id}
                                value={product.id}
                                onSelect={() => {
                                  form.setValue(`items.${index}.productId`, product.id);
                                  form.setValue(`items.${index}.unitPrice`, Number(product.price));
                                  setOpenProduct(null);
                                  setProductSearches(prev => ({
                                    ...prev,
                                    [index]: ""
                                  }));
                                }}
                              >
                                <Check
                                  className={cn(
                                    "mr-2 h-4 w-4",
                                    product.id === field.value ? "opacity-100" : "opacity-0"
                                  )}
                                />
                                <div className="flex flex-col">
                                  <span>{product.name}</span>
                                  <span className="text-sm text-muted-foreground">
                                    SKU: {product.sku} â€¢ Price: â‚¬{Number(product.price).toFixed(2)}
                                  </span>
                                </div>
                              </CommandItem>
                            ))}
                          </CommandGroup>
                        </Command>
                      </PopoverContent>
                    </Popover>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              {/* ... (keep other product fields the same) */}
            </div>
          ))}

          {/* ... (keep remaining form fields and buttons the same) */}
        </form>
      </Form>
    </>
  );
}