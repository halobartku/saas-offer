Here's a clear list of instructions for fixing the View button issue:

1. Update DraggableCard Component:
```typescript
// In DraggableCard.tsx or where DraggableCard is defined
// Add these changes to the View button:

<Button
  variant="ghost"
  size="sm"
  onClick={(e) => {
    e.preventDefault();
    e.stopPropagation();
    // Explicitly prevent drag behavior
    e.currentTarget.style.pointerEvents = 'none';
    setTimeout(() => {
      e.currentTarget.style.pointerEvents = 'auto';
    }, 100);
    onClick?.();
  }}
>
  <Eye className="h-4 w-4 mr-2" />
  View
</Button>
```

2. Modify Drag Sensor Configuration:
```typescript
// In Pipeline.tsx, update the sensors configuration:
const sensors = useSensors(
  useSensor(PointerSensor, {
    activationConstraint: {
      distance: 8,
      tolerance: 5,
    },
    canStartDragging: (event) => {
      return !(event.target instanceof HTMLButtonElement);
    },
  }),
  useSensor(KeyboardSensor, {
    coordinateGetter: sortableKeyboardCoordinates,
  })
);
```

3. Update ViewOfferDialog Implementation:
```typescript
// In Pipeline.tsx, update the dialog trigger section:
{selectedOffer && (
  <ViewOfferDialog
    key={selectedOffer.id} // Add this line
    offer={selectedOffer}
    open={isViewOpen}
    onOpenChange={(open) => {
      setIsViewOpen(open);
      if (!open) {
        setTimeout(() => setSelectedOffer(null), 100);
      }
    }}
  />
)}
```

4. Add Drag Constraints to Card Container:
```typescript
// In DraggableCard component, update the main Card container:
<Card
  ref={setNodeRef}
  style={transform ? {
    transform: `translate3d(${transform.x}px, ${transform.y}px, 0)`,
    touchAction: 'none' // Add this line
  } : { touchAction: 'none' }} // Add this line
  className="cursor-move hover:shadow-md transition-shadow"
  {...attributes}
  {...listeners}
>
```

Step-by-Step Implementation:

1. First, implement the DraggableCard changes to properly handle view button clicks
2. Then update the sensor configuration in Pipeline component
3. Update the ViewOfferDialog implementation with the key prop and timeout
4. Add the drag constraints to the Card container
5. Test each change:
   - Click View button should open dialog without initiating drag
   - Drag and drop should still work when clicking card outside button
   - Dialog should open and close properly
   - No unwanted drag behavior when clicking buttons

Additional Notes:
- Make sure ViewOfferDialog component is properly imported
- Check that all event handlers are properly typed
- Test on both desktop and mobile devices
- Verify that drag and drop still works as expected after changes

If issues persist after these changes:
1. Check Chrome DevTools for any console errors
2. Verify that ViewOfferDialog component is receiving correct props
3. Test with different offer data to ensure consistent behavior
4. Verify that all required dependencies are properly imported

Remember to test thoroughly after each change to ensure both the View functionality and drag-and-drop work as expected.